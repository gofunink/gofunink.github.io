<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>gofunink&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/dbcc855f3e28cacfe527c9115d217c92</icon>
  <subtitle>才高粑斗，学负五车</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.gofunink.com/"/>
  <updated>2019-03-20T03:09:56.636Z</updated>
  <id>https://www.gofunink.com/</id>
  
  <author>
    <name>gofunink</name>
    <email>gofun@189.cn</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hive时间函数</title>
    <link href="https://www.gofunink.com/2019/03/20/Hive%E6%97%B6%E9%97%B4%E5%87%BD%E6%95%B0/"/>
    <id>https://www.gofunink.com/2019/03/20/Hive时间函数/</id>
    <published>2019-03-20T02:45:00.000Z</published>
    <updated>2019-03-20T03:09:56.636Z</updated>
    
    <content type="html"><![CDATA[<!-- <div style="-webkit-box-shadow: 0 0 14px rgba(202,203,203,1);-moz-box-shadow: 0 0 14px rgba(202,203,204,1);background: #fff;padding: 25px;margin-bottom: 100px;"> --><h5 id="当前时间"><a href="#当前时间" class="headerlink" title="当前时间"></a>当前时间</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法: select from_unixtime(unix_timestamp(),&apos;yyyy-MM-dd HH:mm:ss’)</span><br><span class="line"></span><br><span class="line">返回值: string</span><br><span class="line"></span><br><span class="line">hive&gt; select from_unixtime(1323308943,’yyyyMMdd’) from dual;</span><br><span class="line">2019-03-19 17:37:03</span><br></pre></td></tr></table></figure><h5 id="UNIX时间戳转日期函数-from-unixtime"><a href="#UNIX时间戳转日期函数-from-unixtime" class="headerlink" title="UNIX时间戳转日期函数: from_unixtime"></a>UNIX时间戳转日期函数: from_unixtime</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法: from_unixtime(bigint unixtime[, string format])</span><br><span class="line"> </span><br><span class="line">返回值: string</span><br><span class="line">说明: 转化UNIX时间戳（从1970-01-01 00:00:00 UTC到指定时间的秒数）到当前时区的时间格式</span><br><span class="line">举例：</span><br><span class="line">hive&gt; select from_unixtime(1323308943,’yyyyMMdd’) from dual;</span><br><span class="line">20111208</span><br></pre></td></tr></table></figure><h5 id="获取当前UNIX时间戳函数-unix-timestamp"><a href="#获取当前UNIX时间戳函数-unix-timestamp" class="headerlink" title="获取当前UNIX时间戳函数: unix_timestamp"></a>获取当前UNIX时间戳函数: unix_timestamp</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法: unix_timestamp()</span><br><span class="line"> </span><br><span class="line">返回值: bigint</span><br><span class="line">说明: 获得当前时区的UNIX时间戳</span><br><span class="line">举例：</span><br><span class="line">hive&gt; select unix_timestamp() from dual;</span><br><span class="line">1323309615</span><br></pre></td></tr></table></figure><h5 id="日期转UNIX时间戳函数-unix-timestamp"><a href="#日期转UNIX时间戳函数-unix-timestamp" class="headerlink" title="日期转UNIX时间戳函数: unix_timestamp"></a>日期转UNIX时间戳函数: unix_timestamp</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法: unix_timestamp(string date)</span><br><span class="line"> </span><br><span class="line">返回值: bigint</span><br><span class="line">说明: 转换格式为“yyyy-MM-dd HH:mm:ss“的日期到UNIX时间戳。如果转化失败，则返回0。</span><br><span class="line">举例：</span><br><span class="line">hive&gt; select unix_timestamp(’2011-12-07 13:01:03′) from dual;</span><br><span class="line">1323234063</span><br></pre></td></tr></table></figure><h5 id="指定格式日期转UNIX时间戳函数-unix-timestamp"><a href="#指定格式日期转UNIX时间戳函数-unix-timestamp" class="headerlink" title="指定格式日期转UNIX时间戳函数: unix_timestamp"></a>指定格式日期转UNIX时间戳函数: unix_timestamp</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法: unix_timestamp(string date, string pattern)</span><br><span class="line"> </span><br><span class="line">返回值: bigint</span><br><span class="line">说明: 转换pattern格式的日期到UNIX时间戳。如果转化失败，则返回0。</span><br><span class="line">举例：</span><br><span class="line">hive&gt; select unix_timestamp(’20111207 13:01:03′,’yyyyMMdd HH:mm:ss’) from dual;</span><br><span class="line">1323234063</span><br></pre></td></tr></table></figure><h5 id="日期时间转日期函数-to-date"><a href="#日期时间转日期函数-to-date" class="headerlink" title="日期时间转日期函数: to_date"></a>日期时间转日期函数: to_date</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法: to_date(string timestamp)</span><br><span class="line"> </span><br><span class="line">返回值: string</span><br><span class="line">说明: 返回日期时间字段中的日期部分。</span><br><span class="line">举例：</span><br><span class="line">hive&gt; select to_date(’2011-12-08 10:03:01′) from dual;</span><br><span class="line">2011-12-08</span><br></pre></td></tr></table></figure><h5 id="日期转年函数-year"><a href="#日期转年函数-year" class="headerlink" title="日期转年函数: year"></a>日期转年函数: year</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法: year(string date)</span><br><span class="line"> </span><br><span class="line">返回值: int</span><br><span class="line">说明: 返回日期中的年。</span><br><span class="line">举例：</span><br><span class="line">hive&gt; select year(’2011-12-08 10:03:01′) from dual;</span><br><span class="line">2011</span><br><span class="line">hive&gt; select year(’2012-12-08′) from dual;</span><br><span class="line">2012</span><br></pre></td></tr></table></figure><h5 id="日期转月函数-month"><a href="#日期转月函数-month" class="headerlink" title="日期转月函数: month"></a>日期转月函数: month</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法: month (string date)</span><br><span class="line"> </span><br><span class="line">返回值: int</span><br><span class="line">说明: 返回日期中的月份。</span><br><span class="line">举例：</span><br><span class="line">hive&gt; select month(’2011-12-08 10:03:01′) from dual;</span><br><span class="line">12</span><br><span class="line">hive&gt; select month(’2011-08-08′) from dual;</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h5 id="日期转天函数-day"><a href="#日期转天函数-day" class="headerlink" title="日期转天函数: day"></a>日期转天函数: day</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法: day (string date)</span><br><span class="line"> </span><br><span class="line">返回值: int</span><br><span class="line">说明: 返回日期中的天。</span><br><span class="line">举例：</span><br><span class="line">hive&gt; select day(’2011-12-08 10:03:01′) from dual;</span><br><span class="line">8</span><br><span class="line">hive&gt; select day(’2011-12-24′) from dual;</span><br><span class="line">24</span><br></pre></td></tr></table></figure><h5 id="日期转小时函数-hour"><a href="#日期转小时函数-hour" class="headerlink" title="日期转小时函数: hour"></a>日期转小时函数: hour</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法: hour (string date)</span><br><span class="line"> </span><br><span class="line">返回值: int</span><br><span class="line">说明: 返回日期中的小时。</span><br><span class="line">举例：</span><br><span class="line">hive&gt; select hour(’2011-12-08 10:03:01′) from dual;</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h5 id="日期转分钟函数-minute"><a href="#日期转分钟函数-minute" class="headerlink" title="日期转分钟函数: minute"></a>日期转分钟函数: minute</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法: minute (string date)</span><br><span class="line"> </span><br><span class="line">返回值: int</span><br><span class="line">说明: 返回日期中的分钟。</span><br><span class="line">举例：</span><br><span class="line">hive&gt; select minute(’2011-12-08 10:03:01′) from dual;</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h5 id="日期转秒函数-second"><a href="#日期转秒函数-second" class="headerlink" title="日期转秒函数: second"></a>日期转秒函数: second</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法: second (string date)</span><br><span class="line"> </span><br><span class="line">返回值: int</span><br><span class="line">说明: 返回日期中的秒。</span><br><span class="line">举例：</span><br><span class="line">hive&gt; select second(’2011-12-08 10:03:01′) from dual;</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h5 id="日期转周函数-weekofyear"><a href="#日期转周函数-weekofyear" class="headerlink" title="日期转周函数: weekofyear"></a>日期转周函数: weekofyear</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法: weekofyear (string date)</span><br><span class="line"> </span><br><span class="line">返回值: int</span><br><span class="line">说明: 返回日期在当前的周数。</span><br><span class="line">举例：</span><br><span class="line">hive&gt; select weekofyear(’2011-12-08 10:03:01′) from dual;</span><br><span class="line">49</span><br></pre></td></tr></table></figure><h5 id="日期比较函数-datediff"><a href="#日期比较函数-datediff" class="headerlink" title="日期比较函数: datediff"></a>日期比较函数: datediff</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法: datediff(string enddate, string startdate)</span><br><span class="line"> </span><br><span class="line">返回值: int</span><br><span class="line">说明: 返回结束日期减去开始日期的天数。</span><br><span class="line">举例：</span><br><span class="line">hive&gt; select datediff(’2012-12-08′,’2012-05-09′) from dual;</span><br><span class="line">213</span><br></pre></td></tr></table></figure><h5 id="日期增加函数-date-add"><a href="#日期增加函数-date-add" class="headerlink" title="日期增加函数: date_add"></a>日期增加函数: date_add</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法: date_add(string startdate, int days)</span><br><span class="line"> </span><br><span class="line">返回值: string</span><br><span class="line">说明: 返回开始日期startdate增加days天后的日期。</span><br><span class="line">举例：</span><br><span class="line">hive&gt; select date_add(’2012-12-08′,10) from dual;</span><br><span class="line">2012-12-18</span><br></pre></td></tr></table></figure><h5 id="日期减少函数-date-sub"><a href="#日期减少函数-date-sub" class="headerlink" title="日期减少函数: date_sub"></a>日期减少函数: date_sub</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法: date_sub (string startdate, int days)</span><br><span class="line"> </span><br><span class="line">返回值: string</span><br><span class="line">说明: 返回开始日期startdate减少days天后的日期。</span><br><span class="line">举例：</span><br><span class="line">hive&gt; select date_sub(’2012-12-08′,10) from dual;</span><br><span class="line">2012-11-28</span><br></pre></td></tr></table></figure><h5 id="yyyyMMdd转成yyyy-MM-dd"><a href="#yyyyMMdd转成yyyy-MM-dd" class="headerlink" title="yyyyMMdd转成yyyy-MM-dd"></a>yyyyMMdd转成yyyy-MM-dd</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">方法一 语法: from_unixtime+ unix_timestamp</span><br><span class="line"></span><br><span class="line">返回值：string</span><br><span class="line">举例：</span><br><span class="line">hive&gt; select from_unixtime(unix_timestamp(&apos;20171205&apos;,&apos;yyyymmdd&apos;),&apos;yyyy-mm-dd&apos;) from dual;</span><br><span class="line">2017-12-05</span><br><span class="line"></span><br><span class="line">方法二 语法: substr + concat</span><br><span class="line"></span><br><span class="line">返回值：string</span><br><span class="line">举例：</span><br><span class="line">hive&gt; select concat(substr(&apos;20171205&apos;,1,4),&apos;-&apos;,substr(&apos;20171205&apos;,5,2),&apos;-&apos;,substr(&apos;20171205&apos;,7,2)) from dual;</span><br><span class="line">2017-12-05</span><br></pre></td></tr></table></figure><h5 id="yyyy-MM-dd转成yyyyMMdd"><a href="#yyyy-MM-dd转成yyyyMMdd" class="headerlink" title="yyyy-MM-dd转成yyyyMMdd"></a>yyyy-MM-dd转成yyyyMMdd</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">方法一 语法: from_unixtime+ unix_timestamp</span><br><span class="line"></span><br><span class="line">返回值：string</span><br><span class="line">举例：</span><br><span class="line">hive&gt; select from_unixtime(unix_timestamp(&apos;2017-12-05&apos;,&apos;yyyy-mm-dd&apos;),&apos;yyyymmdd&apos;) from dual;</span><br><span class="line">20171205</span><br><span class="line"></span><br><span class="line">方法二 语法: substr + concat</span><br><span class="line"></span><br><span class="line">返回值：string</span><br><span class="line">举例：</span><br><span class="line">hive&gt; select concat(substr(&apos;2017-12-05&apos;,1,4),substr(&apos;2017-12-05&apos;,6,2),substr(&apos;2017-12-05&apos;,9,2)) from dual;</span><br><span class="line">20171205</span><br></pre></td></tr></table></figure><!-- </div> -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- &lt;div style=&quot;-webkit-box-shadow: 0 0 14px rgba(202,203,203,1);-moz-box-shadow: 0 0 14px rgba(202,203,204,1);
background: #fff;padding: 2
      
    
    </summary>
    
      <category term="Hive" scheme="https://www.gofunink.com/categories/Hive/"/>
    
    
      <category term="Hive" scheme="https://www.gofunink.com/tags/Hive/"/>
    
      <category term="时间函数" scheme="https://www.gofunink.com/tags/%E6%97%B6%E9%97%B4%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Mysql数据导出到Hbase</title>
    <link href="https://www.gofunink.com/2019/03/08/Mysql%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA%E5%88%B0Hbase/"/>
    <id>https://www.gofunink.com/2019/03/08/Mysql数据导出到Hbase/</id>
    <published>2019-03-08T09:14:58.000Z</published>
    <updated>2019-03-20T02:45:57.128Z</updated>
    
    <content type="html"><![CDATA[<div style="-webkit-box-shadow: 0 0 14px rgba(202,203,203,1);-moz-box-shadow: 0 0 14px rgba(202,203,204,1);background: #fff;padding: 25px;margin-bottom: 100px;"><br><br><br><strong>Mysql表center_pub_merchant数据导出为center_pub_merchant.tsv</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 172.xx.x.175 -P 3307 -uUSER -pPASSWORD -e &quot;SELECT concat(&apos;merchant:&apos;,id), parentId, id, cascade_label AS cascadeLabel, cascade_level AS cascadeLevel, account_id AS accountId, merchant_name AS merchantName,merchant_type AS merchantType,merchant_project AS merchantProject, full_name AS fullName, telephone, email, thumb, industry, user_id AS userId, province,city, county FROM center_pub_merchant&quot; awifi_dc &gt; /opt/gofunTest/center_pub_merchant.tsv</span><br></pre></td></tr></table></figure><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -put center_pub_merchant.tsv /tmp/center_pub_merchant.tsv</span><br></pre></td></tr></table></figure><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase org.apache.hadoop.hbase.mapreduce.ImportTsv -Dimporttsv.columns=HBASE_ROW_KEY,base_data:parentId,base_data:id,base_data:cascadeLabel,base_data:cascadeLevel,base_data:accountId,base_data:merchantName,base_data:merchantType,base_data:merchantProject,base_data:fullName,base_data:telephone,base_data:email,base_data:thumb,base_data:industry,base_data:userId,base_data:province,base_data:city,base_data:county tj_base_merchant /tmp/center_pub_merchant.tsv</span><br></pre></td></tr></table></figure><br><br><strong>Mysql表center_pub_device数据导出为center_pub_device.tsv</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 172.XX.X.175 -P 3307 -uUSER -pPASSWORD -e &quot;SELECT concat(&apos;device:&apos;,d.device_id),d.province,d.city,d.county,e.entity_type as entityType,d.device_id as deviceId,d.project_id as projectId,d.belongto FROM center_pub_device d INNER JOIN center_pub_entity e ON d.OUT_ID = e.ID WHERE d.OUT_TYPE_ID = &apos;00&apos;&quot; awifi_dc &gt; /opt/gofunTest/center_pub_device.tsv</span><br></pre></td></tr></table></figure><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -put center_pub_device.tsv /tmp/center_pub_device.tsv</span><br></pre></td></tr></table></figure><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase org.apache.hadoop.hbase.mapreduce.ImportTsv -Dimporttsv.columns=HBASE_ROW_KEY,base_data:province,base_data:city,base_data:county,base_data:entityType,base_data:deviceId,base_data:projectId,base_data:belongto tj_base_device /tmp/center_pub_device.tsv</span><br></pre></td></tr></table></figure><br><br>注意：<br><em> 若Permission denied: user=hbase, access=WRITE, inode=”/user”:hdfs:supergroup:drwxr-xr-x<br>          修改 hadoop fs -chmod 777 /user</em> 若报min.user.id。。。的错<br>          找到这个文件/etc/hadoop/conf.cloudera.yarn/container-executor.cfg<br>          chmod 755 container-executor.cfg<br>          将 min.user.id=900改小<br>                    chmod 400 container-executor.cfg<br>* 若报banned.users。。。的错<br>          chmod 755 container-executor.cfg<br>          则将banned.users=hdfs,yarn,mapred,bin中hdfs删掉<br>                    chmod 400 container-executor.cfg<br><br><br><br><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;-webkit-box-shadow: 0 0 14px rgba(202,203,203,1);-moz-box-shadow: 0 0 14px rgba(202,203,204,1);
background: #fff;padding: 25px;m
      
    
    </summary>
    
      <category term="Mysql" scheme="https://www.gofunink.com/categories/Mysql/"/>
    
      <category term="Hbase" scheme="https://www.gofunink.com/categories/Mysql/Hbase/"/>
    
    
      <category term="Mysql" scheme="https://www.gofunink.com/tags/Mysql/"/>
    
      <category term="Hbase" scheme="https://www.gofunink.com/tags/Hbase/"/>
    
  </entry>
  
  <entry>
    <title>Hive的优化总结</title>
    <link href="https://www.gofunink.com/2019/03/07/Hive%E7%9A%84%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <id>https://www.gofunink.com/2019/03/07/Hive的优化总结/</id>
    <published>2019-03-07T12:15:58.000Z</published>
    <updated>2019-03-20T02:44:29.555Z</updated>
    
    <content type="html"><![CDATA[<div style="-webkit-box-shadow: 0 0 14px rgba(202,203,203,1);-moz-box-shadow: 0 0 14px rgba(202,203,204,1);background: #fff;padding: 25px;margin-bottom: 100px;"><br># HIVE的优化总结<br><br>Hive是将符合SQL语法的字符串解析生成可以在Hadoop上执行的MapReduce的工具。使用Hive尽量按照分布式计算的一些特点来设计sql，和传统关系型数据库有区别，<br><br>所以需要去掉原有关系型数据库下开发的一些固有思维。<br><br>基本原则：<br><br><strong>1、尽量尽早地过滤数据，减少每个阶段的数据量,对于分区表要加分区，同时只选择需要使用到的字段</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">select ... from A</span><br><span class="line"></span><br><span class="line">join B</span><br><span class="line"></span><br><span class="line">on A.key = B.key</span><br><span class="line"></span><br><span class="line">where A.userid&gt;10</span><br><span class="line"></span><br><span class="line">     and B.userid&lt;10</span><br><span class="line"></span><br><span class="line">     and A.dt=&apos;20120417&apos;</span><br><span class="line"></span><br><span class="line">     and B.dt=&apos;20120417&apos;;</span><br></pre></td></tr></table></figure><br><br>应该改写为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">select .... </span><br><span class="line">  from (select .... from A</span><br><span class="line"></span><br><span class="line">                        where dt=&apos;201200417&apos;</span><br><span class="line"></span><br><span class="line">                                    and userid&gt;10</span><br><span class="line"></span><br><span class="line">                              ) a</span><br><span class="line"></span><br><span class="line">join ( select .... from B</span><br><span class="line"></span><br><span class="line">       where dt=&apos;201200417&apos;</span><br><span class="line"></span><br><span class="line">                     and userid &lt; 10   </span><br><span class="line"></span><br><span class="line">     ) b</span><br><span class="line"></span><br><span class="line">on a.key = b.key;</span><br></pre></td></tr></table></figure><br><br><strong>2、对历史库的计算经验  (这项是说根据不同的使用目的优化使用方法)</strong><br><br>    历史库计算和使用，分区<br><br><strong>3、尽量原子化操作，尽量避免一个SQL包含复杂逻辑</strong><br><br>    可以使用中间表来完成复杂的逻辑<br><br><strong>4、jion操作   小表要注意放在join的左边（目前TCL里面很多都小表放在join的右边）。</strong><br><br>    否则会引起磁盘和内存的大量消耗<br><br><strong>5、如果union all的部分个数大于2，或者每个union部分数据量大，应该拆成多个insert into 语句，实际测试过程中，执行时间能提升50%</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">insert overwite table tablename partition (dt= ....)</span><br><span class="line"></span><br><span class="line">select ..... from (</span><br><span class="line"></span><br><span class="line">                   select ... from A</span><br><span class="line"></span><br><span class="line">                   union all</span><br><span class="line"></span><br><span class="line">                   select ... from B</span><br><span class="line"></span><br><span class="line">                   union all</span><br><span class="line"></span><br><span class="line">                   select ... from C</span><br><span class="line"></span><br><span class="line">                               ) R</span><br><span class="line"></span><br><span class="line">where ...;</span><br></pre></td></tr></table></figure><br><br>可以改写为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">insert into table tablename partition (dt= ....)</span><br><span class="line"></span><br><span class="line">select .... from A</span><br><span class="line"></span><br><span class="line">WHERE ...;</span><br><span class="line"></span><br><span class="line">insert into table tablename partition (dt= ....)</span><br><span class="line"></span><br><span class="line">select .... from B</span><br><span class="line"></span><br><span class="line">WHERE ...;</span><br><span class="line"></span><br><span class="line">insert into table tablename partition (dt= ....)</span><br><span class="line"></span><br><span class="line">select .... from C</span><br><span class="line"></span><br><span class="line">WHERE ...;</span><br></pre></td></tr></table></figure><br><br><strong>6、写SQL要先了解数据本身的特点，如果有join ,group操作的话，要注意是否会有数据倾斜</strong><br><br> - 如果出现数据倾斜，应当做如下处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">set hive.exec.reducers.max=200;</span><br><span class="line"></span><br><span class="line">set mapred.reduce.tasks= 200;                    ---增大Reduce个数</span><br><span class="line"></span><br><span class="line">set hive.groupby.mapaggr.checkinterval=100000;   --这个是group的键对应的记录条数超过这个值则会进行分拆,值根据具体数据量设置</span><br><span class="line"></span><br><span class="line">set hive.groupby.skewindata=true;                --如果是group by过程出现倾斜 应该设置为true</span><br><span class="line"></span><br><span class="line">set hive.skewjoin.key=100000;                    --这个是join的键对应的记录条数超过这个值则会进行分拆,值根据具体数据量设置</span><br><span class="line"></span><br><span class="line">set hive.optimize.skewjoin=true;                 --如果是join 过程出现倾斜 应该设置为true</span><br></pre></td></tr></table></figure><br><br>    (1)  启动一次job尽可能的多做事情，一个job能完成的事情,不要两个job来做<br><br>    通常来说前面的任务启动可以稍带一起做的事情就一起做了,以便后续的多个任务重用,与此紧密相连的是模型设计,好的模型特别重要.<br><br>    (2) 合理设置reduce个数<br><br>    reduce个数过少没有真正发挥hadoop并行计算的威力，但reduce个数过多，会造成大量小文件问题                        ，数据量、资源情况只有自己最清楚，找到个折衷点,<br><br>    (3) 使用hive.exec.parallel参数控制在同一个sql中的不同的job是否可以同时运行，提高作业的并发<br><br>- 让服务器尽量少做事情，走最优的路径，以资源消耗最少为目标<br><br>(1) 注意join的使用<br><br>    若其中有一个表很小使用map join，否则使用普通的reduce join，注意hive会将join前面的表数据装载内存,所以较小的一个表在较大的表之前,减少内存资源的消耗<br><br>(2)注意小文件的问题<br><br>    在hive里有两种比较常见的处理办法<br><br>    第一是使用Combinefileinputformat，将多个小文件打包作为一个整体的inputsplit，减少map任务数<br><br>    set mapred.max.split.size=256000000;<br><br>    set mapred.min.split.size.per.node=256000000<br><br>    set  Mapred.min.split.size.per.rack=256000000<br><br>    set hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat<br><br>    第二是设置hive参数，将额外启动一个MR Job打包小文件<br><br>    hive.merge.mapredfiles = false 是否合并 Reduce 输出文件，默认为 False<br><br>    hive.merge.size.per.task = 256<em>1000</em>1000 合并文件的大小<br><br>  (3)注意数据倾斜<br><br>    在hive里比较常用的处理办法<br><br>    第一通过hive.groupby.skewindata=true控制生成两个MR Job,第一个MR Job Map的输出结果随机分配到reduce做次预汇总,减少某些key值条数过多某些key条数过小造成的数据倾斜问题<br><br>    第二通过hive.map.aggr = true(默认为true)在Map端做combiner,假如map各条数据基本上不一样, 聚合没什么意义，做combiner反而画蛇添足,hive里也考虑的比较周到通过参数hive.groupby.mapaggr.checkinterval = 100000 (默认)hive.map.aggr.hash.min.reduction=0.5(默认),预先取100000条数据聚合,如果聚合后的条数/100000&gt;0.5，则不再聚合<br><br>(4)善用multi insert,union all<br><br>    multi insert适合基于同一个源表按照不同逻辑不同粒度处理插入不同表的场景，做到只需要扫描源表一次，job个数不变，减少源表扫描次数<br><br>    union all用好，可减少表的扫描次数，减少job的个数,通常预先按不同逻辑不同条件生成的查询union all后，再统一group by计算,不同表的union all相当于multiple inputs,同一个表的union all,相当map一次输出多条<br><br>(5) 参数设置的调优<br><br>    集群参数种类繁多,举个例子比如<br><br>    可针对特定job设置特定参数,比如jvm重用,reduce copy线程数量设置(适合map较快，输出量较大)<br><br>    如果任务数多且小，比如在一分钟之内完成，减少task数量以减少任务初始化的消耗。可以通过配置JVM重用选项减少task的消耗<br><br><strong>一、控制Hive中Map和reduce的数量</strong><br><br>    Hive中的sql查询会生成执行计划，执行计划以MapReduce的方式执行，那么结合数据和集群的大小，map和reduce的数量就会影响到sql执行的效率。<br><br>    除了要控制Hive生成的Job的数量，也要控制map和reduce的数量。<br><br><strong>1、map的数量，通常情况下和split的大小有关系</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> hive中默认的hive.input.format是org.apache.hadoop.hive.ql.io.CombineHiveInputFormat，对于combineHiveInputFormat,它的输入的map数量由三个配置决定，</span><br><span class="line"></span><br><span class="line">mapred.min.split.size.per.node， 一个节点上split的至少的大小</span><br><span class="line"></span><br><span class="line">mapred.min.split.size.per.rack 一个交换机下split至少的大小</span><br><span class="line"></span><br><span class="line">mapred.max.split.size 一个split最大的大小</span><br></pre></td></tr></table></figure><br><br>它的主要思路是把输入目录下的大文件分成多个map的输入, 并合并小文件, 做为一个map的输入. 具体的原理是下述三步:<br><br>    a、根据输入目录下的每个文件,如果其长度超过mapred.max.split.size,以block为单位分成多个split(一个split是一个map的输入),每个split的长度都大于mapred.max.split.size, 因为以block为单位, 因此也会大于blockSize, 此文件剩下的长度如果大于mapred.min.split.size.per.node, 则生成一个split, 否则先暂时保留.<br><br>    b、现在剩下的都是一些长度效短的碎片,把每个rack下碎片合并, 只要长度超过mapred.max.split.size就合并成一个split, 最后如果剩下的碎片比mapred.min.split.size.per.rack大, 就合并成一个split, 否则暂时保留.<br><br>    c、把不同rack下的碎片合并, 只要长度超过mapred.max.split.size就合并成一个split, 剩下的碎片无论长度, 合并成一个split.<br><br>举例:<br><br>    mapred.max.split.size=1000<br><br>    mapred.min.split.size.per.node=300<br><br>    mapred.min.split.size.per.rack=100<br><br>    输入目录下五个文件,rack1下三个文件,长度为2050,1499,10, rack2下两个文件,长度为1010,80. 另外blockSize为500.<br><br>    经过第一步, 生成五个split: 1000,1000,1000,499,1000. 剩下的碎片为rack1下:50,10; rack2下10:80<br><br>    由于两个rack下的碎片和都不超过100, 所以经过第二步, split和碎片都没有变化.<br><br>    第三步,合并四个碎片成一个split, 长度为150.<br><br>    如果要减少map数量, 可以调大mapred.max.split.size, 否则调小即可.<br><br>    其特点是: 一个块至多作为一个map的输入，一个文件可能有多个块，一个文件可能因为块多分给做为不同map的输入， 一个map可能处理多个块，可能处理多个文件。<br><br><strong>2、reduce数量</strong><br><br>可以在hive运行sql的时，打印出来，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Number of reduce tasks not specified. Estimated from input data size: 1</span><br><span class="line"></span><br><span class="line">In order to change the average load for a reducer (in bytes):</span><br><span class="line"></span><br><span class="line">  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;</span><br><span class="line"></span><br><span class="line">In order to limit the maximum number of reducers:</span><br><span class="line"></span><br><span class="line">  set hive.exec.reducers.max=&lt;number&gt;</span><br><span class="line"></span><br><span class="line">In order to set a constant number of reducers:</span><br><span class="line"></span><br><span class="line">  set mapred.reduce.tasks=&lt;number&gt;</span><br></pre></td></tr></table></figure><br><br>reduce数量由以下三个参数决定：<br><br>    mapred.reduce.tasks (强制指定reduce的任务数量)<br><br>    hive.exec.reducers.bytes.per.reducer （每个reduce任务处理的数据量，默认为1000^3=1G)<br><br>    hive.exec.reducers.max（每个任务最大的reduce数，默认为999）<br><br>    计算reducer数的公式很简单N=min( hive.exec.reducers.max ，总输入数据量/ hive.exec.reducers.bytes.per.reducer )<br><br>  只有一个reduce的场景：<br><br>      a、没有group by 的汇总<br><br>      b、order by<br><br>      c、笛卡尔积<br><br><strong>二、join和Group的优化</strong><br><br>       对于普通的join操作，会在map端根据key的hash值，shuffle到某一个reduce上去，在reduce端做join连接操作，内存中缓存join左边的表，遍历右边的表，一次做join操作。所以在做join操作时候，将数据量多的表放在join的右边。<br><br>       当数据量比较大，并且key分布不均匀，大量的key都shuffle到一个reduce上了，就出现了数据的倾斜。<br><br>       对于Group操作，首先在map端聚合，最后在reduce端坐聚合，hive默认是这样的，以下是相关的参数<br><br>        · hive.<a href="http://www.verydemo.com/demo_c152_i9269.html" target="_blank" rel="noopener">map</a>.aggr = true是否在 Map 端进行聚合，默认为 True<br><br>        · hive.groupby.mapaggr.checkinterval = 100000在 Map 端进行聚合操作的条目数目<br><br><strong>对于join和Group操作都可能会出现数据倾斜。</strong><br><br>       以下有几种解决这个问题的常见思路<br><br>       1、参数hive.groupby.skewindata = true,解决数据倾斜的万能钥匙，查询计划会有两个 MR <a href="http://www.verydemo.com/demo_c152_i9269.html" target="_blank" rel="noopener">Job</a>。第一个 MR Job 中，Map 的输出结果集合会随机分布到 Reduce 中，每个 Reduce 做部分聚合操作，并输出结果，这样处理的结果是相同的 Group By Key 有可能被分发到不同的 Reduce 中，从而达到负载均衡的目的；第二个 MR Job 再根据预处理的数据结果按照 Group By Key 分布到 Reduce 中（这个过程可以保证相同的 Group By Key 被分布到同一个 Reduce 中），最后完成最终的聚合操作。<br><br>       2、where的条件写在join里面，使得减少join的数量（经过map端过滤，只输出复合条件的）<br><br>       3、mapjoin方式，无reduce操作，在map端做join操作（map端cache小表的全部数据），这种方式下无法执行Full/RIGHT OUTER join操作<br><br>       4、对于count(distinct)操作，在map端以group by的字段和count的字段联合作为key，如果有大量相同的key，那么会存在数据倾斜的问题<br><br>       5、数据的倾斜还包括，大量的join连接key为空的情况，空的key都hash到一个reduce上去了，解决这个问题，最好把空的key和非空的key做区分，空的key不做join操作。<br><br>       当然有的hive操作，不存在数据倾斜的问题，比如数据聚合类的操作，像sum、count，因为已经在map端做了聚合操作了，到reduce端的数据相对少一些，所以不存在这个问题。<br><br><strong>三、小文件的合并</strong><br><br>       大量的小文件导致文件数目过多，给HDFS带来压力，对hive处理的效率影响比较大，可以合并map和reduce产生的文件<br><br>       hive.merge.mapfiles = true                是否和并 Map 输出文件，默认为 True<br><br>       hive.merge.mapredfiles = false            是否合并  Reduce 输出文件，默认为 False<br><br>       hive.merge.size.per.task = 256<em>1000</em>1000  合并文件的大小<br><br><strong>四、in/exists（not）</strong><br><br>       通过left semi join 实现 in操作，一个限制就是join右边的表只能出现在join条件中<br><br><strong>五、分区裁剪</strong><br><br>       通过在条件中指定分区，来限制数据扫描的范围，可以极大提高查询的效率<br><br><strong>六、排序</strong><br><br>       order by 排序，只存在一个reduce，这样效率比较低。<br><br>       可以用sort by操作,通常结合distribute by使用做reduce分区键<br><br>如想了解更多，请参考<strong>原文地址：<a href="https://blog.csdn.net/lovebyz/article/details/52096464" target="_blank" rel="noopener">HIVE的优化总结</a></strong><br><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;-webkit-box-shadow: 0 0 14px rgba(202,203,203,1);-moz-box-shadow: 0 0 14px rgba(202,203,204,1);
background: #fff;padding: 25px;m
      
    
    </summary>
    
      <category term="Hive" scheme="https://www.gofunink.com/categories/Hive/"/>
    
    
      <category term="Hive优化" scheme="https://www.gofunink.com/tags/Hive%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>用MackDown语法写Hexo博客</title>
    <link href="https://www.gofunink.com/2017/11/10/%E7%94%A8MackDown%E8%AF%AD%E6%B3%95%E5%86%99hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>https://www.gofunink.com/2017/11/10/用MackDown语法写hexo博客/</id>
    <published>2017-11-10T08:10:58.000Z</published>
    <updated>2019-03-20T03:10:15.733Z</updated>
    
    <content type="html"><![CDATA[<!-- <div style="-webkit-box-shadow: 0 0 14px rgba(202,203,203,1);-moz-box-shadow: 0 0 14px rgba(202,203,204,1);background: #fff;padding: 25px;margin-bottom: 100px;"> --><p><a href="http://www.jianshu.com" target="_blank" rel="noopener">「简书」</a>作为一款「写作软件」在诞生之初就支持了 Markdown，Markdown 是一种「电子邮件」风格的「标记语言」，我们强烈推荐所有写作者学习和掌握该语言。为什么？可以参考:</p><ul><li><p><a href="http://www.jianshu.com/p/qqGjLN" target="_blank" rel="noopener">『为什么作家应该用 Markdown 保存自己的文稿』</a>。</p></li><li><p><a href="http://www.jianshu.com/p/PpDNMG" target="_blank" rel="noopener">『Markdown写作浅谈』</a></p></li></ul><p>在此，我们总结 Markdown 的优点如下：</p><ul><li><p>纯文本，所以兼容性极强，可以用所有文本编辑器打开。</p></li><li><p>让你专注于文字而不是排版。</p></li><li><p>格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。</p></li><li><p>Markdown 的标记语法有极好的可读性。</p></li></ul><p>当然，我们既然如此推崇 Markdown ，也必定会教会你使用 Markdown ，这也是本文的目的所在。不过，虽然 <a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">Markdown 的语法</a>已经足够简单，但是现有的 Markdown 语法说明更多的是写给 web 从业者看的，对于很多写作者来说，学习起来效率很低，现在，我们特地为写作者量身定做本指南，从写作者的实际需求出发，介绍写作者真正实用的常用格式，深入浅出、图文并茂地让您迅速掌握 Markdown 语法。</p><p>为了使您更好地学习，我们建议您登录<a href="http://www.%20jianshu.com" target="_blank" rel="noopener">「简书」</a>，将您的编辑器切换至 Markdown 编辑器，新建一篇空白笔记，然后点击右上角的预览模式：</p><p><img src="http://upload-images.jianshu.io/upload_images/259-b7a1aa59aaca63e4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>此时，您的界面应当如下图所示，左侧为编辑区域，右侧为预览区域，您在左侧输入 Markdown 语法的文本，右侧会立即帮您呈现最终结果，好了，让我们开始学习吧~</p><p><img src="http://upload-images.jianshu.io/upload_images/259-05f6819ea5aa4fdd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>这是最为常用的格式，在平时常用的的文本编辑器中大多是这样实现的：输入文本、选中文本、设置标题格式。</p><p>而在 Markdown 中，你只需要在文本前面加上 <code>#</code> 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加 <code>#</code> 即可，标题字号相应降低。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p><em>注：<code>#</code> 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法。</em></p><p><em>你可以你的编辑器中尝试输入这六级标题，可以参考下方的截图：</em></p><p><img src="http://upload-images.jianshu.io/upload_images/259-7424a9a21a2cb81b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表格式也很常用，在 Markdown 中，你只需要在文字前面加上 <code>-</code> 就可以了，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 文本1</span><br><span class="line">- 文本2</span><br><span class="line">- 文本3</span><br></pre></td></tr></table></figure><p>如果你希望有序列表，<br>也可以在文字前面加上 <code>1.</code> <code>2.</code> <code>3.</code> 就可以了，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1\. 文本1</span><br><span class="line">2\. 文本2</span><br><span class="line">3\. 文本3</span><br></pre></td></tr></table></figure><p><em>注：<code>-</code>、<code>1.</code>和文本之间要保留一个字符的空格。</em></p><p><em>列表案例截图如下：</em></p><p><img src="http://upload-images.jianshu.io/upload_images/259-8ccbfed8ce487368.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h2><p>在 Markdown 中，插入链接不需要其他按钮，你只需要使用 <code>[显示文本](链接地址)</code> 这样的语法即可，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[简书](http://www.jianshu.com)</span><br></pre></td></tr></table></figure><p>在 Markdown 中，插入图片不需要其他按钮，你只需要使用 <code>[图片上传失败...(image-5fdc5-1510890177031)]</code> 这样的语法即可，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](http://upload-images.jianshu.io/upload_images/259-0ad0d0bfc1c608b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br></pre></td></tr></table></figure><p><em>注：插入图片的语法和链接的语法很像，只是前面多了一个 <code>！</code>。</em></p><p><em>插入链接和图片的案例截图：</em></p><p><img src="http://upload-images.jianshu.io/upload_images/259-90ac0f366310f464.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在我们写作的时候经常需要引用他人的文字，这个时候引用这个格式就很有必要了，在 Markdown 中，你只需要在你希望引用的文字前面加上 <code>&gt;</code> 就好了，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</span><br></pre></td></tr></table></figure><p><em>注：<code>&gt;</code> 和文本之间要保留一个字符的空格。</em></p><p>最终显示的就是：</p><blockquote><p>一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><p><em>引用的案例截图：</em></p><p><img src="http://upload-images.jianshu.io/upload_images/259-438c3424cfbfb029.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h2><p>Markdown 的粗体和斜体也非常简单，用两个 <code>*</code> 包含一段文本就是粗体的语法，用一个 <code>*</code> 包含一段文本就是斜体的语法。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*一盏灯*， 一片昏黄；**一简书**， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</span><br></pre></td></tr></table></figure><p>最终显示的就是下文，其中「一盏灯」是斜体，「一简书」是粗体：</p><p> <em>一盏灯</em>， 一片昏黄；<strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p><p><em>粗体和斜体的案例截图：</em></p><p><img src="http://upload-images.jianshu.io/upload_images/259-6a74e417a86ac97f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="代码引用"><a href="#代码引用" class="headerlink" title="代码引用"></a>代码引用</h2><p>需要引用代码时，如果引用的语句只有一段，不分行，可以用 ` 将语句包起来。<br>如果引用的语句为多行，可以将<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*代码引用的案例截图：*</span><br><span class="line"></span><br><span class="line">![](http://upload-images.jianshu.io/upload_images/259-dcf737a97e71cd73.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">##表格</span><br><span class="line"></span><br><span class="line">相关代码：</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">显示效果：</span><br><span class="line"></span><br><span class="line">|Tables        | Are           | Cool  |</span><br><span class="line">| ------------- |:-------------:| -----:|</span><br><span class="line">| col 3 is      | right-aligned | $1600 |</span><br><span class="line">| col 2 is      | centered      |   $12 |</span><br><span class="line">| zebra stripes | are neat      |    $1 |</span><br><span class="line"></span><br><span class="line">相关代码：</span><br></pre></td></tr></table></figure><table><thead><tr><th>dog</th><th>bird</th><th>cat</th></tr></thead><tbody><tr><td>foo</td><td>foo</td><td>foo</td></tr><tr><td>bar</td><td>bar</td><td>bar</td></tr><tr><td>baz</td><td>baz</td><td>baz</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">显示效果：</span><br><span class="line"></span><br><span class="line">dog | bird | cat</span><br><span class="line">----|------|----</span><br><span class="line">foo | foo | foo</span><br><span class="line">bar | bar | bar</span><br><span class="line">baz | baz | baz</span><br><span class="line"></span><br><span class="line">## 显示链接中带括号的图片</span><br><span class="line"></span><br><span class="line">![](http://latex.codecogs.com/gif.latex?%5Cprod%20%5C(n_%7Bi%7D%5C)+1)</span><br><span class="line"></span><br><span class="line">代码如下:</span><br></pre></td></tr></table></figure><p>![][1]<br>[1]: <a href="http://latex.codecogs.com/gif.latex?\prod%20\(n_{i}\)+1" target="_blank" rel="noopener">http://latex.codecogs.com/gif.latex?\prod%20\(n_{i}\)+1</a><br><code>`</code></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上几种格式是比较常用的格式，所以我们针对这些语法做了比较详细的说明。除这些之外，Markdown 还有其他语法，如想了解和学习更多，可以参考这篇<a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">『Markdown 语法说明』</a>。</p><p>原文作者：简书 链接：<a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="noopener">http://www.jianshu.com/p/q81RER</a></p><!-- </div> -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- &lt;div style=&quot;-webkit-box-shadow: 0 0 14px rgba(202,203,203,1);-moz-box-shadow: 0 0 14px rgba(202,203,204,1);
background: #fff;padding: 2
      
    
    </summary>
    
      <category term="MackDown" scheme="https://www.gofunink.com/categories/MackDown/"/>
    
      <category term="Hexo" scheme="https://www.gofunink.com/categories/MackDown/Hexo/"/>
    
    
      <category term="MarkDown" scheme="https://www.gofunink.com/tags/MarkDown/"/>
    
      <category term="Hexo" scheme="https://www.gofunink.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
